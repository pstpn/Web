// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

type Passage struct {
	ID           string      `json:"id"`
	CheckpointID string      `json:"checkpointID"`
	DocumentID   string      `json:"documentID"`
	PassageType  PassageType `json:"passageType"`
	Time         time.Time   `json:"time"`
}

type Query struct {
}

type PassageType string

const (
	PassageTypeEntrance           PassageType = "Entrance"
	PassageTypeExit               PassageType = "Exit"
	PassageTypeUnknownPassageType PassageType = "UnknownPassageType"
)

var AllPassageType = []PassageType{
	PassageTypeEntrance,
	PassageTypeExit,
	PassageTypeUnknownPassageType,
}

func (e PassageType) IsValid() bool {
	switch e {
	case PassageTypeEntrance, PassageTypeExit, PassageTypeUnknownPassageType:
		return true
	}
	return false
}

func (e PassageType) String() string {
	return string(e)
}

func (e *PassageType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PassageType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PassageType", str)
	}
	return nil
}

func (e PassageType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
