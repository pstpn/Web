// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	context "context"
	dto "course/internal/service/dto"

	mock "github.com/stretchr/testify/mock"

	model "course/internal/model"
)

// PhotoStorages is an autogenerated mock type for the PhotoStorages type
type PhotoStorages struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, key
func (_m *PhotoStorages) Delete(ctx context.Context, key *model.PhotoKey) error {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.PhotoKey) error); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteKey provides a mock function with given fields: ctx, request
func (_m *PhotoStorages) DeleteKey(ctx context.Context, request *dto.DeletePhotoRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for DeleteKey")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.DeletePhotoRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, key
func (_m *PhotoStorages) Get(ctx context.Context, key *model.PhotoKey) ([]byte, error) {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.PhotoKey) ([]byte, error)); ok {
		return rf(ctx, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.PhotoKey) []byte); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.PhotoKey) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetKey provides a mock function with given fields: ctx, request
func (_m *PhotoStorages) GetKey(ctx context.Context, request *dto.GetPhotoRequest) (*model.PhotoMeta, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for GetKey")
	}

	var r0 *model.PhotoMeta
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.GetPhotoRequest) (*model.PhotoMeta, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dto.GetPhotoRequest) *model.PhotoMeta); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.PhotoMeta)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dto.GetPhotoRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: ctx, request
func (_m *PhotoStorages) Save(ctx context.Context, request *dto.CreatePhotoRequest) (*model.PhotoKey, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 *model.PhotoKey
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.CreatePhotoRequest) (*model.PhotoKey, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dto.CreatePhotoRequest) *model.PhotoKey); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.PhotoKey)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dto.CreatePhotoRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveKey provides a mock function with given fields: ctx, request
func (_m *PhotoStorages) SaveKey(ctx context.Context, request *dto.CreatePhotoKeyRequest) (*model.PhotoMeta, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for SaveKey")
	}

	var r0 *model.PhotoMeta
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.CreatePhotoKeyRequest) (*model.PhotoMeta, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dto.CreatePhotoKeyRequest) *model.PhotoMeta); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.PhotoMeta)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dto.CreatePhotoKeyRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewPhotoStorages creates a new instance of PhotoStorages. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPhotoStorages(t interface {
	mock.TestingT
	Cleanup(func())
}) *PhotoStorages {
	mock := &PhotoStorages{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
